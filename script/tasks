#!/usr/bin/env php
<?php

require_once(dirname(__FILE__) . '/../config/global.inc.php');
require_once 'repo.inc.php';
require_once 'builder.inc.php';
require_once 'projects.inc.php';

$container = create_container();

function create_release($version, $project) {
  global $container;
  $gateway_releases = $container->get('ReleaseGateway');
  $release = new Release(
    array(
      'project_id' => $project->id(),
      'version' => $version,
      'status' => 'building',
      'mode' => 'auto'));
  $gateway_releases->insert($release);
}

function build_release($release, $project) {
  global $container;
  $repo_probe = $container->get('RepoProbe');
  $gateway_releases = $container->get('ReleaseGateway');
  $shell = $container->get('Shell');
  $repo = $repo_probe->getRepositoryAccess($project);
  if ($release->mode() == 'auto') {
    $local_copy = $repo->exportTag($release->version());
  } else {
    $local_copy = $repo->exportRevision('HEAD');
  }
  $files = new FileFinder($local_copy->getPath());
  foreach ($project->files() as $file) {
    $files->traverse($file['path'], $file['ignore'], $file['destination']);
  }
  $builder = $container->get('PackageBuilder');
  $builder->build($local_copy, $files, $project, $release->version());
  $local_copy->destroy($shell);
  $release->setCompleted();
  $gateway_releases->update($release, array('project_id' => $project->id(), 'version' => $release->version()));
}

function task_sweep_projects() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_releases = $container->get('ReleaseGateway');
  $repo_probe = $container->get('RepoProbe');
  foreach ($gateway_project->selectWithAutomaticReleasePolicy() as $project) {
    $repo = $repo_probe->getRepositoryAccess($project);
    $latestTag = $repo->latestTag();
    if ($latestTag) {
      $lastRelease = $gateway_releases->lastReleaseFor($project);
      if (!$lastRelease || ($latestTag > $lastRelease->version())) {
        create_release($latestTag, $project);
      }
    }
  }
}

function get_pending_releases() {
  global $container;
  $gateway_project = $container->get('ProjectGateway');
  $gateway_release = $container->get('ReleaseGateway');
  $result = array();
  foreach ($gateway_release->selectPendingBuild() as $release) {
    $project = $gateway_project->fetch(array('id' => $release->projectId()));
    $result[] = array('project' => $project, 'release' => $release);
  }
  return $result;
}

function task_build_pending_releases() {
  foreach (get_pending_releases() as $release) {
    build_release($release['release'], $release['project']);
  }
  task_pirum_build_channel();
}

function task_list_pending_releases() {
  foreach (get_pending_releases() as $release) {
    echo $release['project']->name(), " (", $release['release']->version(), ")\n";
  }
}

function task_list_tasks() {
  $defined_functions = get_defined_functions();
  echo "Available tasks:\n";
  foreach ($defined_functions['user'] as $fn) {
    if (preg_match('/^task_(.+)$/', $fn, $reg)) {
      echo "  ", $reg[1], "\n";
    }
  }
}

ob_start();
require_once 'thirdparty/pirum';
ob_clean();
class Pearhub_PirumBuilder extends Pirum_Builder {
  protected function buildIndex() {}
  protected function buildCss() {}
  protected function updateIndex() {}
  protected function updateCss() {}
}

function task_pirum_build_channel() {
  global $container;
  $builder = $container->get('Pearhub_PirumBuilder');
  $builder->build();
}

if (realpath($_SERVER['PHP_SELF']) == __FILE__) {
  if (isset($_SERVER['argv'][1]) && function_exists('task_'.$_SERVER['argv'][1])) {
    $args = $_SERVER['argv'];
    array_shift($args);
    array_shift($args);
    call_user_func_array('task_'.$_SERVER['argv'][1], $args);
  } else {
    task_list_tasks();
  }
}
